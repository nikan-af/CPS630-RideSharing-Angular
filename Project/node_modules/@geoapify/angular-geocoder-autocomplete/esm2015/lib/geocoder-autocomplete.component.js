import { Component, ViewChild, Input, Output, EventEmitter, Inject } from '@angular/core';
import { GeocoderAutocomplete } from '@geoapify/geocoder-autocomplete';
import { GEOAPIFY_CONFIG } from './geoapify-config';
export class GeocoderAutocompleteComponent {
    constructor(config) {
        this.config = config;
        this.placeSelect = new EventEmitter();
        this.suggestionsChange = new EventEmitter();
    }
    ngOnInit() {
    }
    ngAfterViewInit() {
        const options = {};
        if (this.placeholder) {
            options.placeholder = this.placeholder;
        }
        if (this.type) {
            options.type = this.type;
        }
        if (this.lang) {
            options.lang = this.lang;
        }
        if (this.limit) {
            options.limit = this.limit;
        }
        if (this.skipIcons) {
            options.skipIcons = this.skipIcons;
        }
        if (this.skipDetails) {
            options.skipDetails = this.skipDetails;
        }
        this.autocomplete = new GeocoderAutocomplete(this.container.nativeElement, this.config.apiKey, options);
        if (this.value) {
            this.autocomplete.setValue(this.value);
        }
        if (this.countryCodes) {
            console.warn("WARNING! Obsolete function called. The  'countryCodes' input has been deprecated, please use the new 'filterByCountryCode' input instead!");
            this.autocomplete.addFilterByCountry(this.countryCodes);
        }
        if (this.position) {
            console.warn("WARNING! Obsolete function called. The  'position' input has been deprecated, please use the new 'biasByLocation' input instead!");
            this.autocomplete.addBiasByProximity(this.position);
        }
        if (this.filterByCircle) {
            this.autocomplete.addFilterByCircle(this.filterByCircle);
        }
        if (this.filterByCountryCode) {
            this.autocomplete.addFilterByCountry(this.filterByCountryCode);
        }
        if (this.filterByRect) {
            this.autocomplete.addFilterByRect(this.filterByRect);
        }
        if (this.biasByCircle) {
            this.autocomplete.addBiasByCircle(this.biasByCircle);
        }
        if (this.biasByRect) {
            this.autocomplete.addBiasByRect(this.biasByRect);
        }
        if (this.biasByProximity) {
            this.autocomplete.addBiasByProximity(this.biasByProximity);
        }
        if (this.biasByCountryCode) {
            this.autocomplete.addBiasByCountry(this.biasByCountryCode);
        }
        this.autocomplete.on('select', this.onSelect.bind(this));
        this.autocomplete.on('suggestions', this.onSuggestions.bind(this));
    }
    onSelect(value) {
        this.placeSelect.emit(value);
    }
    onSuggestions(value) {
        this.suggestionsChange.emit(value);
    }
    ngOnChanges(changes) {
        if (!this.autocomplete) {
            return;
        }
        if (changes['value'] &&
            !changes['value'].isFirstChange()) {
            this.autocomplete.setValue(changes['value'].currentValue);
        }
        if (changes['type'] &&
            !changes['type'].isFirstChange()) {
            this.autocomplete.setType(changes['type'].currentValue);
        }
        if (changes['lang'] &&
            !changes['lang'].isFirstChange()) {
            this.autocomplete.setLang(changes['lang'].currentValue);
        }
        if (changes['filterByCircle'] &&
            !changes['filterByCircle'].isFirstChange()) {
            this.autocomplete.addFilterByCircle(changes['filterByCircle'].currentValue);
        }
        if (changes['filterByCountryCode'] &&
            !changes['filterByCountryCode'].isFirstChange()) {
            this.autocomplete.addFilterByCountry(changes['filterByCountryCode'].currentValue);
        }
        if (changes['filterByRect'] &&
            !changes['filterByRect'].isFirstChange()) {
            this.autocomplete.addFilterByRect(changes['filterByRect'].currentValue);
        }
        if (changes['biasByCircle'] &&
            !changes['biasByCircle'].isFirstChange()) {
            this.autocomplete.addBiasByCircle(changes['biasByCircle'].currentValue);
        }
        if (changes['biasByRect'] &&
            !changes['biasByRect'].isFirstChange()) {
            this.autocomplete.addBiasByRect(changes['biasByRect'].currentValue);
        }
        if (changes['biasByProximity'] &&
            !changes['biasByProximity'].isFirstChange()) {
            this.autocomplete.addBiasByProximity(changes['biasByProximity'].currentValue);
        }
        if (changes['biasByCountryCode'] &&
            !changes['biasByCountryCode'].isFirstChange()) {
            this.autocomplete.addBiasByCountry(changes['biasByCountryCode'].currentValue);
        }
        if (changes['countryCodes'] &&
            !changes['countryCodes'].isFirstChange()) {
            console.warn("WARNING! Obsolete function called. The  'countryCodes' input has been deprecated, please use the new 'filterByCountryCode' input instead!");
            this.autocomplete.addFilterByCountry(changes['countryCodes'].currentValue);
        }
        if (changes['position'] &&
            !changes['position'].isFirstChange()) {
            console.warn("WARNING! Obsolete function called. The  'position' input has been deprecated, please use the new 'biasByLocation' input instead!");
            this.autocomplete.addBiasByProximity(changes['position'].currentValue);
        }
        if (changes['limit'] &&
            !changes['limit'].isFirstChange()) {
            this.autocomplete.setLimit(changes['limit'].currentValue);
        }
    }
    ngOnDestroy() {
        this.autocomplete.off('select', this.onSelect);
        this.autocomplete.off('suggestions', this.onSuggestions);
    }
}
GeocoderAutocompleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'geoapify-geocoder-autocomplete',
                template: '<div class="geocoder-container" #container></div>',
                styles: ['.geocoder-container {position: relative}']
            },] }
];
GeocoderAutocompleteComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [GEOAPIFY_CONFIG,] }] }
];
GeocoderAutocompleteComponent.propDecorators = {
    container: [{ type: ViewChild, args: ['container',] }],
    value: [{ type: Input }],
    placeholder: [{ type: Input }],
    type: [{ type: Input }],
    skipIcons: [{ type: Input }],
    skipDetails: [{ type: Input }],
    lang: [{ type: Input }],
    filterByCountryCode: [{ type: Input }],
    filterByCircle: [{ type: Input }],
    filterByRect: [{ type: Input }],
    biasByCountryCode: [{ type: Input }],
    biasByCircle: [{ type: Input }],
    biasByRect: [{ type: Input }],
    biasByProximity: [{ type: Input }],
    countryCodes: [{ type: Input }],
    position: [{ type: Input }],
    limit: [{ type: Input }],
    placeSelect: [{ type: Output }],
    suggestionsChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvY29kZXItYXV0b2NvbXBsZXRlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS9hbGZpeWEvd29ya3NwYWNlL2dlb2NvZGluZy9hbmd1bGFyLWdlb2NvZGVyLWF1dG9jb21wbGV0ZS9wcm9qZWN0cy9hbmd1bGFyLWdlb2NvZGVyLWF1dG9jb21wbGV0ZS9zcmMvIiwic291cmNlcyI6WyJsaWIvZ2VvY29kZXItYXV0b2NvbXBsZXRlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFNBQVMsRUFBNEMsS0FBSyxFQUFhLE1BQU0sRUFBRSxZQUFZLEVBQWEsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xLLE9BQU8sRUFBRSxvQkFBb0IsRUFBbUssTUFBTSxpQ0FBaUMsQ0FBQztBQUN4TyxPQUFPLEVBQWtCLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBVXBFLE1BQU0sT0FBTyw2QkFBNkI7SUE2RHhDLFlBQTZDLE1BQXNCO1FBQXRCLFdBQU0sR0FBTixNQUFNLENBQWdCO1FBTG5FLGdCQUFXLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFHekQsc0JBQWlCLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFFUSxDQUFDO0lBRXhFLFFBQVE7SUFFUixDQUFDO0lBRUQsZUFBZTtRQUNiLE1BQU0sT0FBTyxHQUFnQyxFQUFFLENBQUM7UUFFaEQsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUN4QztRQUVELElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNiLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztTQUMxQjtRQUVELElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNiLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztTQUMxQjtR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QUs7NkJBR0wsS0FBSzsyQkFHTCxLQUFLO2dDQUdMLEtBQUs7MkJBR0wsS0FBSzt5QkFHTCxLQUFLOzhCQUdMLEtBQUs7MkJBR0wsS0FBSzt1QkFHTCxLQUFLO29CQUdMLEtBQUs7MEJBR0wsTUFBTTtnQ0FHTixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFZpZXdDaGlsZCwgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3SW5pdCwgU2ltcGxlQ2hhbmdlcywgSW5wdXQsIE9uQ2hhbmdlcywgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHZW9jb2RlckF1dG9jb21wbGV0ZSwgTG9jYXRpb25UeXBlLCBTdXBwb3J0ZWRMYW5ndWFnZSwgQ291bnR5Q29kZSwgR2VvUG9zaXRpb24sIEdlb2NvZGVyQXV0b2NvbXBsZXRlT3B0aW9ucywgQnlDb3VudHJ5Q29kZU9wdGlvbnMsIEJ5Q2lyY2xlT3B0aW9ucywgQnlSZWN0T3B0aW9ucywgQnlQcm94aW1pdHlPcHRpb25zIH0gZnJvbSAnQGdlb2FwaWZ5L2dlb2NvZGVyLWF1dG9jb21wbGV0ZSc7XG5pbXBvcnQgeyBHZW9hcGlmeUNvbmZpZywgR0VPQVBJRllfQ09ORklHIH0gZnJvbSAnLi9nZW9hcGlmeS1jb25maWcnO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2dlb2FwaWZ5LWdlb2NvZGVyLWF1dG9jb21wbGV0ZScsXG4gIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cImdlb2NvZGVyLWNvbnRhaW5lclwiICNjb250YWluZXI+PC9kaXY+JyxcbiAgc3R5bGVzOiBbXG4gICAgJy5nZW9jb2Rlci1jb250YWluZXIge3Bvc2l0aW9uOiByZWxhdGl2ZX0nXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgR2VvY29kZXJBdXRvY29tcGxldGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcblxuICBhdXRvY29tcGxldGU6IEdlb2NvZGVyQXV0b2NvbXBsZXRlO1xuXG4gIEBWaWV3Q2hpbGQoJ2NvbnRhaW5lcicpXG4gIGNvbnRhaW5lcjogRWxlbWVudFJlZjtcblxuICBASW5wdXQoKVxuICB2YWx1ZTogc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG5cbiAgQElucHV0KClcbiAgdHlwZTogTG9jYXRpb25UeXBlO1xuXG4gIEBJbnB1dCgpXG4gIHNraXBJY29uczogYm9vbGVhbjtcblxuICBASW5wdXQoKVxuICBza2lwRGV0YWlsczogYm9vbGVhbjtcblxuICBASW5wdXQoKVxuICBsYW5nOiBTdXBwb3J0ZWRMYW5ndWFnZVxuXG4gIEBJbnB1dCgpXG4gIGZpbHRlckJ5Q291bnRyeUNvZGU6IEJ5Q291bnRyeUNvZGVPcHRpb25zO1xuXG4gIEBJbnB1dCgpXG4gIGZpbHRlckJ5Q2lyY2xlOiBCeUNpcmNsZU9wdGlvbnM7XG5cbiAgQElucHV0KClcbiAgZmlsdGVyQnlSZWN0OiBCeVJlY3RPcHRpb25zO1xuXG4gIEBJbnB1dCgpXG4gIGJpYXNCeUNvdW50cnlDb2RlOiBCeUNvdW50cnlDb2RlT3B0aW9ucztcblxuICBASW5wdXQoKVxuICBiaWFzQnlDaXJjbGU6IEJ5Q2lyY2xlT3B0aW9ucztcblxuICBASW5wdXQoKVxuICBiaWFzQnlSZWN0OiBCeVJlY3RPcHRpb25zO1xuXG4gIEBJbnB1dCgpXG4gIGJpYXNCeVByb3hpbWl0eTogQnlQcm94aW1pdHlPcHRpb25zO1xuXG4gIEBJbnB1dCgpXG4gIGNvdW50cnlDb2RlczogQ291bnR5Q29kZVtdOyAgIC8vIGRlcHJlY2F0ZWRcblxuICBASW5wdXQoKVxuICBwb3NpdGlvbjogR2VvUG9zaXRpb247ICAgLy8gZGVwcmVjYXRlZFxuXG4gIEBJbnB1dCgpXG4gIGxpbWl0OiBudW1iZXI7XG5cbiAgQE91dHB1dCgpXG4gIHBsYWNlU2VsZWN0OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIEBPdXRwdXQoKVxuICBzdWdnZXN0aW9uc0NoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KEdFT0FQSUZZX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IEdlb2FwaWZ5Q29uZmlnKSB7IH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcblxuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGNvbnN0IG9wdGlvbnM6IEdlb2NvZGVyQXV0b2NvbXBsZXRlT3B0aW9ucyA9IHt9O1xuXG4gICAgaWYgKHRoaXMucGxhY2Vob2xkZXIpIHtcbiAgICAgIG9wdGlvbnMucGxhY2Vob2xkZXIgPSB0aGlzLnBsYWNlaG9sZGVyO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnR5cGUpIHtcbiAgICAgIG9wdGlvbnMudHlwZSA9IHRoaXMudHlwZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sYW5nKSB7XG4gICAgICBvcHRpb25zLmxhbmcgPSB0aGlzLmxhbmc7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGltaXQpIHtcbiAgICAgIG9wdGlvbnMubGltaXQgPSB0aGlzLmxpbWl0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNraXBJY29ucykge1xuICAgICAgb3B0aW9ucy5za2lwSWNvbnMgPSB0aGlzLnNraXBJY29ucztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5za2lwRGV0YWlscykge1xuICAgICAgb3B0aW9ucy5za2lwRGV0YWlscyA9IHRoaXMuc2tpcERldGFpbHM7XG4gICAgfVxuXG4gICAgdGhpcy5hdXRvY29tcGxldGUgPSBuZXcgR2VvY29kZXJBdXRvY29tcGxldGUodGhpcy5jb250YWluZXIubmF0aXZlRWxlbWVudCwgdGhpcy5jb25maWcuYXBpS2V5LCBvcHRpb25zKTtcblxuICAgIGlmICh0aGlzLnZhbHVlKSB7XG4gICAgICB0aGlzLmF1dG9jb21wbGV0ZS5zZXRWYWx1ZSh0aGlzLnZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb3VudHJ5Q29kZXMpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIldBUk5JTkchIE9ic29sZXRlIGZ1bmN0aW9uIGNhbGxlZC4gVGhlICAnY291bnRyeUNvZGVzJyBpbnB1dCBoYXMgYmVlbiBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIHRoZSBuZXcgJ2ZpbHRlckJ5Q291bnRyeUNvZGUnIGlucHV0IGluc3RlYWQhXCIpO1xuICAgICAgdGhpcy5hdXRvY29tcGxldGUuYWRkRmlsdGVyQnlDb3VudHJ5KHRoaXMuY291bnRyeUNvZGVzKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wb3NpdGlvbikge1xuICAgICAgY29uc29sZS53YXJuKFwiV0FSTklORyEgT2Jzb2xldGUgZnVuY3Rpb24gY2FsbGVkLiBUaGUgICdwb3NpdGlvbicgaW5wdXQgaGFzIGJlZW4gZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSB0aGUgbmV3ICdiaWFzQnlMb2NhdGlvbicgaW5wdXQgaW5zdGVhZCFcIik7XG4gICAgICB0aGlzLmF1dG9jb21wbGV0ZS5hZGRCaWFzQnlQcm94aW1pdHkodGhpcy5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZmlsdGVyQnlDaXJjbGUpIHtcbiAgICAgIHRoaXMuYXV0b2NvbXBsZXRlLmFkZEZpbHRlckJ5Q2lyY2xlKHRoaXMuZmlsdGVyQnlDaXJjbGUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZpbHRlckJ5Q291bnRyeUNvZGUpIHtcbiAgICAgIHRoaXMuYXV0b2NvbXBsZXRlLmFkZEZpbHRlckJ5Q291bnRyeSh0aGlzLmZpbHRlckJ5Q291bnRyeUNvZGUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZpbHRlckJ5UmVjdCkge1xuICAgICAgdGhpcy5hdXRvY29tcGxldGUuYWRkRmlsdGVyQnlSZWN0KHRoaXMuZmlsdGVyQnlSZWN0KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5iaWFzQnlDaXJjbGUpIHtcbiAgICAgIHRoaXMuYXV0b2NvbXBsZXRlLmFkZEJpYXNCeUNpcmNsZSh0aGlzLmJpYXNCeUNpcmNsZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYmlhc0J5UmVjdCkge1xuICAgICAgdGhpcy5hdXRvY29tcGxldGUuYWRkQmlhc0J5UmVjdCh0aGlzLmJpYXNCeVJlY3QpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmJpYXNCeVByb3hpbWl0eSkge1xuICAgICAgdGhpcy5hdXRvY29tcGxldGUuYWRkQmlhc0J5UHJveGltaXR5KHRoaXMuYmlhc0J5UHJveGltaXR5KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5iaWFzQnlDb3VudHJ5Q29kZSkge1xuICAgICAgdGhpcy5hdXRvY29tcGxldGUuYWRkQmlhc0J5Q291bnRyeSh0aGlzLmJpYXNCeUNvdW50cnlDb2RlKTtcbiAgICB9XG5cbiAgICB0aGlzLmF1dG9jb21wbGV0ZS5vbignc2VsZWN0JywgdGhpcy5vblNlbGVjdC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmF1dG9jb21wbGV0ZS5vbignc3VnZ2VzdGlvbnMnLCB0aGlzLm9uU3VnZ2VzdGlvbnMuYmluZCh0aGlzKSk7XG4gIH1cblxuICBvblNlbGVjdCh2YWx1ZTogYW55KSB7XG4gICAgdGhpcy5wbGFjZVNlbGVjdC5lbWl0KHZhbHVlKTtcbiAgfVxuXG4gIG9uU3VnZ2VzdGlvbnModmFsdWU6IGFueSkge1xuICAgIHRoaXMuc3VnZ2VzdGlvbnNDaGFuZ2UuZW1pdCh2YWx1ZSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG5cbiAgICBpZiAoIXRoaXMuYXV0b2NvbXBsZXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZXNbJ3ZhbHVlJ10gJiZcbiAgICAgICFjaGFuZ2VzWyd2YWx1ZSddLmlzRmlyc3RDaGFuZ2UoKSkge1xuICAgICAgdGhpcy5hdXRvY29tcGxldGUuc2V0VmFsdWUoY2hhbmdlc1sndmFsdWUnXS5jdXJyZW50VmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzWyd0eXBlJ10gJiZcbiAgICAgICFjaGFuZ2VzWyd0eXBlJ10uaXNGaXJzdENoYW5nZSgpKSB7XG4gICAgICB0aGlzLmF1dG9jb21wbGV0ZS5zZXRUeXBlKGNoYW5nZXNbJ3R5cGUnXS5jdXJyZW50VmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzWydsYW5nJ10gJiZcbiAgICAgICFjaGFuZ2VzWydsYW5nJ10uaXNGaXJzdENoYW5nZSgpKSB7XG4gICAgICB0aGlzLmF1dG9jb21wbGV0ZS5zZXRMYW5nKGNoYW5nZXNbJ2xhbmcnXS5jdXJyZW50VmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzWydmaWx0ZXJCeUNpcmNsZSddICYmXG4gICAgIWNoYW5nZXNbJ2ZpbHRlckJ5Q2lyY2xlJ10uaXNGaXJzdENoYW5nZSgpKSB7XG4gICAgICB0aGlzLmF1dG9jb21wbGV0ZS5hZGRGaWx0ZXJCeUNpcmNsZShjaGFuZ2VzWydmaWx0ZXJCeUNpcmNsZSddLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZXNbJ2ZpbHRlckJ5Q291bnRyeUNvZGUnXSAmJlxuICAgICFjaGFuZ2VzWydmaWx0ZXJCeUNvdW50cnlDb2RlJ10uaXNGaXJzdENoYW5nZSgpKSB7XG4gICAgICB0aGlzLmF1dG9jb21wbGV0ZS5hZGRGaWx0ZXJCeUNvdW50cnkoY2hhbmdlc1snZmlsdGVyQnlDb3VudHJ5Q29kZSddLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZXNbJ2ZpbHRlckJ5UmVjdCddICYmXG4gICAgIWNoYW5nZXNbJ2ZpbHRlckJ5UmVjdCddLmlzRmlyc3RDaGFuZ2UoKSkge1xuICAgICAgdGhpcy5hdXRvY29tcGxldGUuYWRkRmlsdGVyQnlSZWN0KGNoYW5nZXNbJ2ZpbHRlckJ5UmVjdCddLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZXNbJ2JpYXNCeUNpcmNsZSddICYmXG4gICAgIWNoYW5nZXNbJ2JpYXNCeUNpcmNsZSddLmlzRmlyc3RDaGFuZ2UoKSkge1xuICAgICAgdGhpcy5hdXRvY29tcGxldGUuYWRkQmlhc0J5Q2lyY2xlKGNoYW5nZXNbJ2JpYXNCeUNpcmNsZSddLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZXNbJ2JpYXNCeVJlY3QnXSAmJlxuICAgICFjaGFuZ2VzWydiaWFzQnlSZWN0J10uaXNGaXJzdENoYW5nZSgpKSB7XG4gICAgICB0aGlzLmF1dG9jb21wbGV0ZS5hZGRCaWFzQnlSZWN0KGNoYW5nZXNbJ2JpYXNCeVJlY3QnXS5jdXJyZW50VmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzWydiaWFzQnlQcm94aW1pdHknXSAmJlxuICAgICFjaGFuZ2VzWydiaWFzQnlQcm94aW1pdHknXS5pc0ZpcnN0Q2hhbmdlKCkpIHtcbiAgICAgIHRoaXMuYXV0b2NvbXBsZXRlLmFkZEJpYXNCeVByb3hpbWl0eShjaGFuZ2VzWydiaWFzQnlQcm94aW1pdHknXS5jdXJyZW50VmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzWydiaWFzQnlDb3VudHJ5Q29kZSddICYmXG4gICAgIWNoYW5nZXNbJ2JpYXNCeUNvdW50cnlDb2RlJ10uaXNGaXJzdENoYW5nZSgpKSB7XG4gICAgICB0aGlzLmF1dG9jb21wbGV0ZS5hZGRCaWFzQnlDb3VudHJ5KGNoYW5nZXNbJ2JpYXNCeUNvdW50cnlDb2RlJ10uY3VycmVudFZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoY2hhbmdlc1snY291bnRyeUNvZGVzJ10gJiZcbiAgICAgICFjaGFuZ2VzWydjb3VudHJ5Q29kZXMnXS5pc0ZpcnN0Q2hhbmdlKCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIldBUk5JTkchIE9ic29sZXRlIGZ1bmN0aW9uIGNhbGxlZC4gVGhlICAnY291bnRyeUNvZGVzJyBpbnB1dCBoYXMgYmVlbiBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIHRoZSBuZXcgJ2ZpbHRlckJ5Q291bnRyeUNvZGUnIGlucHV0IGluc3RlYWQhXCIpO1xuICAgICAgdGhpcy5hdXRvY29tcGxldGUuYWRkRmlsdGVyQnlDb3VudHJ5KGNoYW5nZXNbJ2NvdW50cnlDb2RlcyddLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZXNbJ3Bvc2l0aW9uJ10gJiZcbiAgICAgICFjaGFuZ2VzWydwb3NpdGlvbiddLmlzRmlyc3RDaGFuZ2UoKSkge1xuICAgICAgY29uc29sZS53YXJuKFwiV0FSTklORyEgT2Jzb2xldGUgZnVuY3Rpb24gY2FsbGVkLiBUaGUgICdwb3NpdGlvbicgaW5wdXQgaGFzIGJlZW4gZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSB0aGUgbmV3ICdiaWFzQnlMb2NhdGlvbicgaW5wdXQgaW5zdGVhZCFcIik7XG4gICAgICB0aGlzLmF1dG9jb21wbGV0ZS5hZGRCaWFzQnlQcm94aW1pdHkoY2hhbmdlc1sncG9zaXRpb24nXS5jdXJyZW50VmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzWydsaW1pdCddICYmXG4gICAgICAhY2hhbmdlc1snbGltaXQnXS5pc0ZpcnN0Q2hhbmdlKCkpIHtcbiAgICAgIHRoaXMuYXV0b2NvbXBsZXRlLnNldExpbWl0KGNoYW5nZXNbJ2xpbWl0J10uY3VycmVudFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmF1dG9jb21wbGV0ZS5vZmYoJ3NlbGVjdCcsIHRoaXMub25TZWxlY3QpO1xuICAgIHRoaXMuYXV0b2NvbXBsZXRlLm9mZignc3VnZ2VzdGlvbnMnLCB0aGlzLm9uU3VnZ2VzdGlvbnMpO1xuICB9XG59Il19
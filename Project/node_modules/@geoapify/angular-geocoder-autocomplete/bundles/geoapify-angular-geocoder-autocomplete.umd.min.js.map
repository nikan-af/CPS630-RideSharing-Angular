{"version":3,"sources":["../../../projects/angular-geocoder-autocomplete/src/lib/geoapify-config.ts","../../../projects/angular-geocoder-autocomplete/src/lib/geocoder-autocomplete.component.ts","../../../projects/angular-geocoder-autocomplete/src/lib/geocoder-autocomplete.module.ts"],"names":["GEOAPIFY_CONFIG","InjectionToken","GeocoderAutocompleteComponent","config","this","placeSelect","EventEmitter","suggestionsChange","prototype","ngOnInit","ngAfterViewInit","options","placeholder","type","lang","limit","skipIcons","skipDetails","autocomplete","GeocoderAutocomplete","container","nativeElement","apiKey","value","setValue","countryCodes","console","warn","addFilterByCountry","position","addBiasByProximity","filterByCircle","addFilterByCircle","filterByCountryCode","filterByRect","addFilterByRect","biasByCircle","addBiasByCircle","biasByRect","addBiasByRect","biasByProximity","biasByCountryCode","addBiasByCountry","on","onSelect","bind","onSuggestions","emit","ngOnChanges","changes","isFirstChange","currentValue","setType","setLang","setLimit","ngOnDestroy","off","Component","args","selector","template","Inject","ViewChild","Input","Output","GeoapifyGeocoderAutocompleteModule","withConfig","ngModule","providers","provide","useValue","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const GEOAPIFY_CONFIG = new InjectionToken<GeoapifyConfig>('geoapify.config');\nexport interface GeoapifyConfig {\n    apiKey: string;\n}","import { Component, OnInit, ViewChild, ElementRef, AfterViewInit, SimpleChanges, Input, OnChanges, Output, EventEmitter, OnDestroy, Inject } from '@angular/core';\nimport { GeocoderAutocomplete, LocationType, SupportedLanguage, CountyCode, GeoPosition, GeocoderAutocompleteOptions, ByCountryCodeOptions, ByCircleOptions, ByRectOptions, ByProximityOptions } from '@geoapify/geocoder-autocomplete';\nimport { GeoapifyConfig, GEOAPIFY_CONFIG } from './geoapify-config';\n\n\n@Component({\n  selector: 'geoapify-geocoder-autocomplete',\n  template: '<div class=\"geocoder-container\" #container></div>',\n  styles: [\n    '.geocoder-container {position: relative}'\n  ]\n})\nexport class GeocoderAutocompleteComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {\n\n  autocomplete: GeocoderAutocomplete;\n\n  @ViewChild('container')\n  container: ElementRef;\n\n  @Input()\n  value: string;\n\n  @Input()\n  placeholder: string;\n\n  @Input()\n  type: LocationType;\n\n  @Input()\n  skipIcons: boolean;\n\n  @Input()\n  skipDetails: boolean;\n\n  @Input()\n  lang: SupportedLanguage\n\n  @Input()\n  filterByCountryCode: ByCountryCodeOptions;\n\n  @Input()\n  filterByCircle: ByCircleOptions;\n\n  @Input()\n  filterByRect: ByRectOptions;\n\n  @Input()\n  biasByCountryCode: ByCountryCodeOptions;\n\n  @Input()\n  biasByCircle: ByCircleOptions;\n\n  @Input()\n  biasByRect: ByRectOptions;\n\n  @Input()\n  biasByProximity: ByProximityOptions;\n\n  @Input()\n  countryCodes: CountyCode[];   // deprecated\n\n  @Input()\n  position: GeoPosition;   // deprecated\n\n  @Input()\n  limit: number;\n\n  @Output()\n  placeSelect: EventEmitter<any> = new EventEmitter<any>();\n\n  @Output()\n  suggestionsChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(@Inject(GEOAPIFY_CONFIG) private config: GeoapifyConfig) { }\n\n  ngOnInit(): void {\n\n  }\n\n  ngAfterViewInit() {\n    const options: GeocoderAutocompleteOptions = {};\n\n    if (this.placeholder) {\n      options.placeholder = this.placeholder;\n    }\n\n    if (this.type) {\n      options.type = this.type;\n    }\n\n    if (this.lang) {\n      options.lang = this.lang;\n    }\n\n    if (this.limit) {\n      options.limit = this.limit;\n    }\n\n    if (this.skipIcons) {\n      options.skipIcons = this.skipIcons;\n    }\n\n    if (this.skipDetails) {\n      options.skipDetails = this.skipDetails;\n    }\n\n    this.autocomplete = new GeocoderAutocomplete(this.container.nativeElement, this.config.apiKey, options);\n\n    if (this.value) {\n      this.autocomplete.setValue(this.value);\n    }\n\n    if (this.countryCodes) {\n      console.warn(\"WARNING! Obsolete function called. The  'countryCodes' input has been deprecated, please use the new 'filterByCountryCode' input instead!\");\n      this.autocomplete.addFilterByCountry(this.countryCodes);\n    }\n\n    if (this.position) {\n      console.warn(\"WARNING! Obsolete function called. The  'position' input has been deprecated, please use the new 'biasByLocation' input instead!\");\n      this.autocomplete.addBiasByProximity(this.position);\n    }\n\n    if (this.filterByCircle) {\n      this.autocomplete.addFilterByCircle(this.filterByCircle);\n    }\n\n    if (this.filterByCountryCode) {\n      this.autocomplete.addFilterByCountry(this.filterByCountryCode);\n    }\n\n    if (this.filterByRect) {\n      this.autocomplete.addFilterByRect(this.filterByRect);\n    }\n\n    if (this.biasByCircle) {\n      this.autocomplete.addBiasByCircle(this.biasByCircle);\n    }\n\n    if (this.biasByRect) {\n      this.autocomplete.addBiasByRect(this.biasByRect);\n    }\n\n    if (this.biasByProximity) {\n      this.autocomplete.addBiasByProximity(this.biasByProximity);\n    }\n\n    if (this.biasByCountryCode) {\n      this.autocomplete.addBiasByCountry(this.biasByCountryCode);\n    }\n\n    this.autocomplete.on('select', this.onSelect.bind(this));\n    this.autocomplete.on('suggestions', this.onSuggestions.bind(this));\n  }\n\n  onSelect(value: any) {\n    this.placeSelect.emit(value);\n  }\n\n  onSuggestions(value: any) {\n    this.suggestionsChange.emit(value);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n\n    if (!this.autocomplete) {\n      return;\n    }\n\n    if (changes['value'] &&\n      !changes['value'].isFirstChange()) {\n      this.autocomplete.setValue(changes['value'].currentValue);\n    }\n\n    if (changes['type'] &&\n      !changes['type'].isFirstChange()) {\n      this.autocomplete.setType(changes['type'].currentValue);\n    }\n\n    if (changes['lang'] &&\n      !changes['lang'].isFirstChange()) {\n      this.autocomplete.setLang(changes['lang'].currentValue);\n    }\n\n    if (changes['filterByCircle'] &&\n    !changes['filterByCircle'].isFirstChange()) {\n      this.autocomplete.addFilterByCircle(changes['filterByCircle'].currentValue);\n    }\n\n    if (changes['filterByCountryCode'] &&\n    !changes['filterByCountryCode'].isFirstChange()) {\n      this.autocomplete.addFilterByCountry(changes['filterByCountryCode'].currentValue);\n    }\n\n    if (changes['filterByRect'] &&\n    !changes['filterByRect'].isFirstChange()) {\n      this.autocomplete.addFilterByRect(changes['filterByRect'].currentValue);\n    }\n\n    if (changes['biasByCircle'] &&\n    !changes['biasByCircle'].isFirstChange()) {\n      this.autocomplete.addBiasByCircle(changes['biasByCircle'].currentValue);\n    }\n\n    if (changes['biasByRect'] &&\n    !changes['biasByRect'].isFirstChange()) {\n      this.autocomplete.addBiasByRect(changes['biasByRect'].currentValue);\n    }\n\n    if (changes['biasByProximity'] &&\n    !changes['biasByProximity'].isFirstChange()) {\n      this.autocomplete.addBiasByProximity(changes['biasByProximity'].currentValue);\n    }\n\n    if (changes['biasByCountryCode'] &&\n    !changes['biasByCountryCode'].isFirstChange()) {\n      this.autocomplete.addBiasByCountry(changes['biasByCountryCode'].currentValue);\n    }\n\n    if (changes['countryCodes'] &&\n      !changes['countryCodes'].isFirstChange()) {\n      console.warn(\"WARNING! Obsolete function called. The  'countryCodes' input has been deprecated, please use the new 'filterByCountryCode' input instead!\");\n      this.autocomplete.addFilterByCountry(changes['countryCodes'].currentValue);\n    }\n\n    if (changes['position'] &&\n      !changes['position'].isFirstChange()) {\n      console.warn(\"WARNING! Obsolete function called. The  'position' input has been deprecated, please use the new 'biasByLocation' input instead!\");\n      this.autocomplete.addBiasByProximity(changes['position'].currentValue);\n    }\n\n    if (changes['limit'] &&\n      !changes['limit'].isFirstChange()) {\n      this.autocomplete.setLimit(changes['limit'].currentValue);\n    }\n  }\n\n  ngOnDestroy() {\n    this.autocomplete.off('select', this.onSelect);\n    this.autocomplete.off('suggestions', this.onSuggestions);\n  }\n}","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { GeocoderAutocompleteComponent } from './geocoder-autocomplete.component';\nimport { GEOAPIFY_CONFIG } from './geoapify-config';\n\n@NgModule({\n  declarations: [GeocoderAutocompleteComponent],\n  imports: [\n  ],\n  exports: [GeocoderAutocompleteComponent]\n})\nexport class GeoapifyGeocoderAutocompleteModule {\n  static withConfig( apiKey: string ): ModuleWithProviders<GeoapifyGeocoderAutocompleteModule> {\n    return {\n      ngModule: GeoapifyGeocoderAutocompleteModule,\n      providers: [\n        { provide: GEOAPIFY_CONFIG, useValue: { apiKey: apiKey }}\n      ]\n    }\n  }\n} \n"]}
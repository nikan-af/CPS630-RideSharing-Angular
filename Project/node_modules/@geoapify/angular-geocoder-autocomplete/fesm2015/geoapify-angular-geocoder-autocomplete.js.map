{"version":3,"file":"geoapify-angular-geocoder-autocomplete.js","sources":["../../../projects/angular-geocoder-autocomplete/src/lib/geoapify-config.ts","../../../projects/angular-geocoder-autocomplete/src/lib/geocoder-autocomplete.component.ts","../../../projects/angular-geocoder-autocomplete/src/lib/geocoder-autocomplete.module.ts","../../../projects/angular-geocoder-autocomplete/src/public-api.ts","../../../projects/angular-geocoder-autocomplete/src/geoapify-angular-geocoder-autocomplete.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const GEOAPIFY_CONFIG = new InjectionToken<GeoapifyConfig>('geoapify.config');\nexport interface GeoapifyConfig {\n    apiKey: string;\n}","import { Component, OnInit, ViewChild, ElementRef, AfterViewInit, SimpleChanges, Input, OnChanges, Output, EventEmitter, OnDestroy, Inject } from '@angular/core';\nimport { GeocoderAutocomplete, LocationType, SupportedLanguage, CountyCode, GeoPosition, GeocoderAutocompleteOptions, ByCountryCodeOptions, ByCircleOptions, ByRectOptions, ByProximityOptions } from '@geoapify/geocoder-autocomplete';\nimport { GeoapifyConfig, GEOAPIFY_CONFIG } from './geoapify-config';\n\n\n@Component({\n  selector: 'geoapify-geocoder-autocomplete',\n  template: '<div class=\"geocoder-container\" #container></div>',\n  styles: [\n    '.geocoder-container {position: relative}'\n  ]\n})\nexport class GeocoderAutocompleteComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {\n\n  autocomplete: GeocoderAutocomplete;\n\n  @ViewChild('container')\n  container: ElementRef;\n\n  @Input()\n  value: string;\n\n  @Input()\n  placeholder: string;\n\n  @Input()\n  type: LocationType;\n\n  @Input()\n  skipIcons: boolean;\n\n  @Input()\n  skipDetails: boolean;\n\n  @Input()\n  lang: SupportedLanguage\n\n  @Input()\n  filterByCountryCode: ByCountryCodeOptions;\n\n  @Input()\n  filterByCircle: ByCircleOptions;\n\n  @Input()\n  filterByRect: ByRectOptions;\n\n  @Input()\n  biasByCountryCode: ByCountryCodeOptions;\n\n  @Input()\n  biasByCircle: ByCircleOptions;\n\n  @Input()\n  biasByRect: ByRectOptions;\n\n  @Input()\n  biasByProximity: ByProximityOptions;\n\n  @Input()\n  countryCodes: CountyCode[];   // deprecated\n\n  @Input()\n  position: GeoPosition;   // deprecated\n\n  @Input()\n  limit: number;\n\n  @Output()\n  placeSelect: EventEmitter<any> = new EventEmitter<any>();\n\n  @Output()\n  suggestionsChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(@Inject(GEOAPIFY_CONFIG) private config: GeoapifyConfig) { }\n\n  ngOnInit(): void {\n\n  }\n\n  ngAfterViewInit() {\n    const options: GeocoderAutocompleteOptions = {};\n\n    if (this.placeholder) {\n      options.placeholder = this.placeholder;\n    }\n\n    if (this.type) {\n      options.type = this.type;\n    }\n\n    if (this.lang) {\n      options.lang = this.lang;\n    }\n\n    if (this.limit) {\n      options.limit = this.limit;\n    }\n\n    if (this.skipIcons) {\n      options.skipIcons = this.skipIcons;\n    }\n\n    if (this.skipDetails) {\n      options.skipDetails = this.skipDetails;\n    }\n\n    this.autocomplete = new GeocoderAutocomplete(this.container.nativeElement, this.config.apiKey, options);\n\n    if (this.value) {\n      this.autocomplete.setValue(this.value);\n    }\n\n    if (this.countryCodes) {\n      console.warn(\"WARNING! Obsolete function called. The  'countryCodes' input has been deprecated, please use the new 'filterByCountryCode' input instead!\");\n      this.autocomplete.addFilterByCountry(this.countryCodes);\n    }\n\n    if (this.position) {\n      console.warn(\"WARNING! Obsolete function called. The  'position' input has been deprecated, please use the new 'biasByLocation' input instead!\");\n      this.autocomplete.addBiasByProximity(this.position);\n    }\n\n    if (this.filterByCircle) {\n      this.autocomplete.addFilterByCircle(this.filterByCircle);\n    }\n\n    if (this.filterByCountryCode) {\n      this.autocomplete.addFilterByCountry(this.filterByCountryCode);\n    }\n\n    if (this.filterByRect) {\n      this.autocomplete.addFilterByRect(this.filterByRect);\n    }\n\n    if (this.biasByCircle) {\n      this.autocomplete.addBiasByCircle(this.biasByCircle);\n    }\n\n    if (this.biasByRect) {\n      this.autocomplete.addBiasByRect(this.biasByRect);\n    }\n\n    if (this.biasByProximity) {\n      this.autocomplete.addBiasByProximity(this.biasByProximity);\n    }\n\n    if (this.biasByCountryCode) {\n      this.autocomplete.addBiasByCountry(this.biasByCountryCode);\n    }\n\n    this.autocomplete.on('select', this.onSelect.bind(this));\n    this.autocomplete.on('suggestions', this.onSuggestions.bind(this));\n  }\n\n  onSelect(value: any) {\n    this.placeSelect.emit(value);\n  }\n\n  onSuggestions(value: any) {\n    this.suggestionsChange.emit(value);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n\n    if (!this.autocomplete) {\n      return;\n    }\n\n    if (changes['value'] &&\n      !changes['value'].isFirstChange()) {\n      this.autocomplete.setValue(changes['value'].currentValue);\n    }\n\n    if (changes['type'] &&\n      !changes['type'].isFirstChange()) {\n      this.autocomplete.setType(changes['type'].currentValue);\n    }\n\n    if (changes['lang'] &&\n      !changes['lang'].isFirstChange()) {\n      this.autocomplete.setLang(changes['lang'].currentValue);\n    }\n\n    if (changes['filterByCircle'] &&\n    !changes['filterByCircle'].isFirstChange()) {\n      this.autocomplete.addFilterByCircle(changes['filterByCircle'].currentValue);\n    }\n\n    if (changes['filterByCountryCode'] &&\n    !changes['filterByCountryCode'].isFirstChange()) {\n      this.autocomplete.addFilterByCountry(changes['filterByCountryCode'].currentValue);\n    }\n\n    if (changes['filterByRect'] &&\n    !changes['filterByRect'].isFirstChange()) {\n      this.autocomplete.addFilterByRect(changes['filterByRect'].currentValue);\n    }\n\n    if (changes['biasByCircle'] &&\n    !changes['biasByCircle'].isFirstChange()) {\n      this.autocomplete.addBiasByCircle(changes['biasByCircle'].currentValue);\n    }\n\n    if (changes['biasByRect'] &&\n    !changes['biasByRect'].isFirstChange()) {\n      this.autocomplete.addBiasByRect(changes['biasByRect'].currentValue);\n    }\n\n    if (changes['biasByProximity'] &&\n    !changes['biasByProximity'].isFirstChange()) {\n      this.autocomplete.addBiasByProximity(changes['biasByProximity'].currentValue);\n    }\n\n    if (changes['biasByCountryCode'] &&\n    !changes['biasByCountryCode'].isFirstChange()) {\n      this.autocomplete.addBiasByCountry(changes['biasByCountryCode'].currentValue);\n    }\n\n    if (changes['countryCodes'] &&\n      !changes['countryCodes'].isFirstChange()) {\n      console.warn(\"WARNING! Obsolete function called. The  'countryCodes' input has been deprecated, please use the new 'filterByCountryCode' input instead!\");\n      this.autocomplete.addFilterByCountry(changes['countryCodes'].currentValue);\n    }\n\n    if (changes['position'] &&\n      !changes['position'].isFirstChange()) {\n      console.warn(\"WARNING! Obsolete function called. The  'position' input has been deprecated, please use the new 'biasByLocation' input instead!\");\n      this.autocomplete.addBiasByProximity(changes['position'].currentValue);\n    }\n\n    if (changes['limit'] &&\n      !changes['limit'].isFirstChange()) {\n      this.autocomplete.setLimit(changes['limit'].currentValue);\n    }\n  }\n\n  ngOnDestroy() {\n    this.autocomplete.off('select', this.onSelect);\n    this.autocomplete.off('suggestions', this.onSuggestions);\n  }\n}","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { GeocoderAutocompleteComponent } from './geocoder-autocomplete.component';\nimport { GEOAPIFY_CONFIG } from './geoapify-config';\n\n@NgModule({\n  declarations: [GeocoderAutocompleteComponent],\n  imports: [\n  ],\n  exports: [GeocoderAutocompleteComponent]\n})\nexport class GeoapifyGeocoderAutocompleteModule {\n  static withConfig( apiKey: string ): ModuleWithProviders<GeoapifyGeocoderAutocompleteModule> {\n    return {\n      ngModule: GeoapifyGeocoderAutocompleteModule,\n      providers: [\n        { provide: GEOAPIFY_CONFIG, useValue: { apiKey: apiKey }}\n      ]\n    }\n  }\n} \n","/*\n * Public API Surface of angular-geocoder-autocomplete\n */\n\nexport * from './lib/geocoder-autocomplete.component';\nexport * from './lib/geocoder-autocomplete.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {GEOAPIFY_CONFIG as ɵa,GeoapifyConfig as ɵb} from './lib/geoapify-config';"],"names":[],"mappings":"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"}